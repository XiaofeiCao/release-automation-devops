// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.dev.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.dev.fluent.PropertiesClient;
import com.azure.dev.fluent.models.PropertiesCollectionInner;
import com.azure.dev.models.JsonPatchDocument;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in PropertiesClient. */
public final class PropertiesClientImpl implements PropertiesClient {
    private final ClientLogger logger = new ClientLogger(PropertiesClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final PropertiesService service;

    /** The service client containing this operation class. */
    private final DevClientImpl client;

    /**
     * Initializes an instance of PropertiesClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    PropertiesClientImpl(DevClientImpl client) {
        this.service =
            RestProxy.create(PropertiesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for DevClientProperties to be used by the proxy service to perform REST
     * calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "DevClientProperties")
    private interface PropertiesService {
        @Headers({"Content-Type: application/json"})
        @Get("/{organization}/{project}/_apis/build/builds/{buildId}/properties")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<PropertiesCollectionInner>> getBuildProperties(
            @HostParam("$host") String endpoint,
            @PathParam("organization") String organization,
            @PathParam("project") String project,
            @PathParam("buildId") int buildId,
            @QueryParam("filter") String filter,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json-patch+json"})
        @Patch("/{organization}/{project}/_apis/build/builds/{buildId}/properties")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<PropertiesCollectionInner>> updateBuildProperties(
            @HostParam("$host") String endpoint,
            @PathParam("organization") String organization,
            @PathParam("project") String project,
            @PathParam("buildId") int buildId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json-patch+json") JsonPatchDocument body,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/{organization}/{project}/_apis/build/definitions/{definitionId}/properties")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<PropertiesCollectionInner>> getDefinitionProperties(
            @HostParam("$host") String endpoint,
            @PathParam("organization") String organization,
            @PathParam("project") String project,
            @PathParam("definitionId") int definitionId,
            @QueryParam("filter") String filter,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json-patch+json"})
        @Patch("/{organization}/{project}/_apis/build/definitions/{definitionId}/properties")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<PropertiesCollectionInner>> updateDefinitionProperties(
            @HostParam("$host") String endpoint,
            @PathParam("organization") String organization,
            @PathParam("project") String project,
            @PathParam("definitionId") int definitionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json-patch+json") JsonPatchDocument body,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Gets properties for a build.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param filter A comma-delimited list of properties. If specified, filters to these specific properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties for a build.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<PropertiesCollectionInner>> getBuildPropertiesWithResponseAsync(
        String organization, String project, int buildId, String filter) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        final String apiVersion = "6.0";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getBuildProperties(
                            this.client.getEndpoint(),
                            organization,
                            project,
                            buildId,
                            filter,
                            apiVersion,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets properties for a build.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param filter A comma-delimited list of properties. If specified, filters to these specific properties.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties for a build.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<PropertiesCollectionInner>> getBuildPropertiesWithResponseAsync(
        String organization, String project, int buildId, String filter, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        final String apiVersion = "6.0";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .getBuildProperties(
                this.client.getEndpoint(), organization, project, buildId, filter, apiVersion, accept, context);
    }

    /**
     * Gets properties for a build.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param filter A comma-delimited list of properties. If specified, filters to these specific properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties for a build.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PropertiesCollectionInner> getBuildPropertiesAsync(
        String organization, String project, int buildId, String filter) {
        return getBuildPropertiesWithResponseAsync(organization, project, buildId, filter)
            .flatMap(
                (Response<PropertiesCollectionInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets properties for a build.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties for a build.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PropertiesCollectionInner> getBuildPropertiesAsync(String organization, String project, int buildId) {
        final String filter = null;
        return getBuildPropertiesWithResponseAsync(organization, project, buildId, filter)
            .flatMap(
                (Response<PropertiesCollectionInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets properties for a build.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties for a build.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PropertiesCollectionInner getBuildProperties(String organization, String project, int buildId) {
        final String filter = null;
        return getBuildPropertiesAsync(organization, project, buildId, filter).block();
    }

    /**
     * Gets properties for a build.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param filter A comma-delimited list of properties. If specified, filters to these specific properties.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties for a build.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<PropertiesCollectionInner> getBuildPropertiesWithResponse(
        String organization, String project, int buildId, String filter, Context context) {
        return getBuildPropertiesWithResponseAsync(organization, project, buildId, filter, context).block();
    }

    /**
     * Updates properties for a build.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param body The JSON model for JSON Patch Operations.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the class represents a property bag as a collection of key-value pairs.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<PropertiesCollectionInner>> updateBuildPropertiesWithResponseAsync(
        String organization, String project, int buildId, JsonPatchDocument body) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String apiVersion = "6.0";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .updateBuildProperties(
                            this.client.getEndpoint(),
                            organization,
                            project,
                            buildId,
                            apiVersion,
                            body,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Updates properties for a build.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param body The JSON model for JSON Patch Operations.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the class represents a property bag as a collection of key-value pairs.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<PropertiesCollectionInner>> updateBuildPropertiesWithResponseAsync(
        String organization, String project, int buildId, JsonPatchDocument body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String apiVersion = "6.0";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .updateBuildProperties(
                this.client.getEndpoint(), organization, project, buildId, apiVersion, body, accept, context);
    }

    /**
     * Updates properties for a build.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param body The JSON model for JSON Patch Operations.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the class represents a property bag as a collection of key-value pairs.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PropertiesCollectionInner> updateBuildPropertiesAsync(
        String organization, String project, int buildId, JsonPatchDocument body) {
        return updateBuildPropertiesWithResponseAsync(organization, project, buildId, body)
            .flatMap(
                (Response<PropertiesCollectionInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Updates properties for a build.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param body The JSON model for JSON Patch Operations.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the class represents a property bag as a collection of key-value pairs.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PropertiesCollectionInner updateBuildProperties(
        String organization, String project, int buildId, JsonPatchDocument body) {
        return updateBuildPropertiesAsync(organization, project, buildId, body).block();
    }

    /**
     * Updates properties for a build.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param body The JSON model for JSON Patch Operations.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the class represents a property bag as a collection of key-value pairs.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<PropertiesCollectionInner> updateBuildPropertiesWithResponse(
        String organization, String project, int buildId, JsonPatchDocument body, Context context) {
        return updateBuildPropertiesWithResponseAsync(organization, project, buildId, body, context).block();
    }

    /**
     * Gets properties for a definition.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param definitionId The ID of the definition.
     * @param filter A comma-delimited list of properties. If specified, filters to these specific properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties for a definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<PropertiesCollectionInner>> getDefinitionPropertiesWithResponseAsync(
        String organization, String project, int definitionId, String filter) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        final String apiVersion = "6.0";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getDefinitionProperties(
                            this.client.getEndpoint(),
                            organization,
                            project,
                            definitionId,
                            filter,
                            apiVersion,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets properties for a definition.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param definitionId The ID of the definition.
     * @param filter A comma-delimited list of properties. If specified, filters to these specific properties.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties for a definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<PropertiesCollectionInner>> getDefinitionPropertiesWithResponseAsync(
        String organization, String project, int definitionId, String filter, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        final String apiVersion = "6.0";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .getDefinitionProperties(
                this.client.getEndpoint(), organization, project, definitionId, filter, apiVersion, accept, context);
    }

    /**
     * Gets properties for a definition.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param definitionId The ID of the definition.
     * @param filter A comma-delimited list of properties. If specified, filters to these specific properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties for a definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PropertiesCollectionInner> getDefinitionPropertiesAsync(
        String organization, String project, int definitionId, String filter) {
        return getDefinitionPropertiesWithResponseAsync(organization, project, definitionId, filter)
            .flatMap(
                (Response<PropertiesCollectionInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets properties for a definition.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param definitionId The ID of the definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties for a definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PropertiesCollectionInner> getDefinitionPropertiesAsync(
        String organization, String project, int definitionId) {
        final String filter = null;
        return getDefinitionPropertiesWithResponseAsync(organization, project, definitionId, filter)
            .flatMap(
                (Response<PropertiesCollectionInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets properties for a definition.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param definitionId The ID of the definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties for a definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PropertiesCollectionInner getDefinitionProperties(String organization, String project, int definitionId) {
        final String filter = null;
        return getDefinitionPropertiesAsync(organization, project, definitionId, filter).block();
    }

    /**
     * Gets properties for a definition.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param definitionId The ID of the definition.
     * @param filter A comma-delimited list of properties. If specified, filters to these specific properties.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties for a definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<PropertiesCollectionInner> getDefinitionPropertiesWithResponse(
        String organization, String project, int definitionId, String filter, Context context) {
        return getDefinitionPropertiesWithResponseAsync(organization, project, definitionId, filter, context).block();
    }

    /**
     * Updates properties for a definition.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param definitionId The ID of the definition.
     * @param body The JSON model for JSON Patch Operations.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the class represents a property bag as a collection of key-value pairs.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<PropertiesCollectionInner>> updateDefinitionPropertiesWithResponseAsync(
        String organization, String project, int definitionId, JsonPatchDocument body) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String apiVersion = "6.0";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .updateDefinitionProperties(
                            this.client.getEndpoint(),
                            organization,
                            project,
                            definitionId,
                            apiVersion,
                            body,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Updates properties for a definition.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param definitionId The ID of the definition.
     * @param body The JSON model for JSON Patch Operations.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the class represents a property bag as a collection of key-value pairs.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<PropertiesCollectionInner>> updateDefinitionPropertiesWithResponseAsync(
        String organization, String project, int definitionId, JsonPatchDocument body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String apiVersion = "6.0";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .updateDefinitionProperties(
                this.client.getEndpoint(), organization, project, definitionId, apiVersion, body, accept, context);
    }

    /**
     * Updates properties for a definition.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param definitionId The ID of the definition.
     * @param body The JSON model for JSON Patch Operations.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the class represents a property bag as a collection of key-value pairs.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PropertiesCollectionInner> updateDefinitionPropertiesAsync(
        String organization, String project, int definitionId, JsonPatchDocument body) {
        return updateDefinitionPropertiesWithResponseAsync(organization, project, definitionId, body)
            .flatMap(
                (Response<PropertiesCollectionInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Updates properties for a definition.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param definitionId The ID of the definition.
     * @param body The JSON model for JSON Patch Operations.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the class represents a property bag as a collection of key-value pairs.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PropertiesCollectionInner updateDefinitionProperties(
        String organization, String project, int definitionId, JsonPatchDocument body) {
        return updateDefinitionPropertiesAsync(organization, project, definitionId, body).block();
    }

    /**
     * Updates properties for a definition.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param definitionId The ID of the definition.
     * @param body The JSON model for JSON Patch Operations.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the class represents a property bag as a collection of key-value pairs.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<PropertiesCollectionInner> updateDefinitionPropertiesWithResponse(
        String organization, String project, int definitionId, JsonPatchDocument body, Context context) {
        return updateDefinitionPropertiesWithResponseAsync(organization, project, definitionId, body, context).block();
    }
}
