// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.dev.models;

import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/** Resource collection API of Properties. */
public interface Properties {
    /**
     * Gets properties for a build.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties for a build.
     */
    PropertiesCollection getBuildProperties(String organization, String project, int buildId);

    /**
     * Gets properties for a build.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param filter A comma-delimited list of properties. If specified, filters to these specific properties.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties for a build.
     */
    Response<PropertiesCollection> getBuildPropertiesWithResponse(
        String organization, String project, int buildId, String filter, Context context);

    /**
     * Updates properties for a build.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param body The JSON model for JSON Patch Operations.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the class represents a property bag as a collection of key-value pairs.
     */
    PropertiesCollection updateBuildProperties(
        String organization, String project, int buildId, JsonPatchDocument body);

    /**
     * Updates properties for a build.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param body The JSON model for JSON Patch Operations.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the class represents a property bag as a collection of key-value pairs.
     */
    Response<PropertiesCollection> updateBuildPropertiesWithResponse(
        String organization, String project, int buildId, JsonPatchDocument body, Context context);

    /**
     * Gets properties for a definition.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param definitionId The ID of the definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties for a definition.
     */
    PropertiesCollection getDefinitionProperties(String organization, String project, int definitionId);

    /**
     * Gets properties for a definition.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param definitionId The ID of the definition.
     * @param filter A comma-delimited list of properties. If specified, filters to these specific properties.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties for a definition.
     */
    Response<PropertiesCollection> getDefinitionPropertiesWithResponse(
        String organization, String project, int definitionId, String filter, Context context);

    /**
     * Updates properties for a definition.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param definitionId The ID of the definition.
     * @param body The JSON model for JSON Patch Operations.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the class represents a property bag as a collection of key-value pairs.
     */
    PropertiesCollection updateDefinitionProperties(
        String organization, String project, int definitionId, JsonPatchDocument body);

    /**
     * Updates properties for a definition.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param definitionId The ID of the definition.
     * @param body The JSON model for JSON Patch Operations.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the class represents a property bag as a collection of key-value pairs.
     */
    Response<PropertiesCollection> updateDefinitionPropertiesWithResponse(
        String organization, String project, int definitionId, JsonPatchDocument body, Context context);
}
