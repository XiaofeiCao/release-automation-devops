// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.dev.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.dev.fluent.TagsClient;
import java.util.List;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in TagsClient. */
public final class TagsClientImpl implements TagsClient {
    private final ClientLogger logger = new ClientLogger(TagsClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final TagsService service;

    /** The service client containing this operation class. */
    private final DevClientImpl client;

    /**
     * Initializes an instance of TagsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    TagsClientImpl(DevClientImpl client) {
        this.service = RestProxy.create(TagsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for DevClientTags to be used by the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "DevClientTags")
    private interface TagsService {
        @Headers({"Content-Type: application/json"})
        @Post("/{organization}/{project}/_apis/build/builds/{buildId}/tags")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<List<String>>> addBuildTags(
            @HostParam("$host") String endpoint,
            @PathParam("organization") String organization,
            @PathParam("project") String project,
            @PathParam("buildId") int buildId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") List<String> body,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/{organization}/{project}/_apis/build/builds/{buildId}/tags")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<List<String>>> getBuildTags(
            @HostParam("$host") String endpoint,
            @PathParam("organization") String organization,
            @PathParam("project") String project,
            @PathParam("buildId") int buildId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put("/{organization}/{project}/_apis/build/builds/{buildId}/tags/{tag}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<List<String>>> addBuildTag(
            @HostParam("$host") String endpoint,
            @PathParam("organization") String organization,
            @PathParam("project") String project,
            @PathParam("buildId") int buildId,
            @PathParam("tag") String tag,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete("/{organization}/{project}/_apis/build/builds/{buildId}/tags/{tag}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<List<String>>> deleteBuildTag(
            @HostParam("$host") String endpoint,
            @PathParam("organization") String organization,
            @PathParam("project") String project,
            @PathParam("buildId") int buildId,
            @PathParam("tag") String tag,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post("/{organization}/{project}/_apis/build/definitions/{DefinitionId}/tags")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<List<String>>> addDefinitionTags(
            @HostParam("$host") String endpoint,
            @PathParam("organization") String organization,
            @PathParam("project") String project,
            @PathParam("definitionId") int definitionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") List<String> body,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/{organization}/{project}/_apis/build/definitions/{DefinitionId}/tags")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<List<String>>> getDefinitionTags(
            @HostParam("$host") String endpoint,
            @PathParam("organization") String organization,
            @PathParam("project") String project,
            @PathParam("definitionId") int definitionId,
            @QueryParam("revision") Integer revision,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put("/{organization}/{project}/_apis/build/definitions/{DefinitionId}/tags/{tag}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<List<String>>> addDefinitionTag(
            @HostParam("$host") String endpoint,
            @PathParam("organization") String organization,
            @PathParam("project") String project,
            @PathParam("definitionId") int definitionId,
            @PathParam("tag") String tag,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete("/{organization}/{project}/_apis/build/definitions/{DefinitionId}/tags/{tag}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<List<String>>> deleteDefinitionTag(
            @HostParam("$host") String endpoint,
            @PathParam("organization") String organization,
            @PathParam("project") String project,
            @PathParam("definitionId") int definitionId,
            @PathParam("tag") String tag,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/{organization}/{project}/_apis/build/tags")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<List<String>>> getTags(
            @HostParam("$host") String endpoint,
            @PathParam("organization") String organization,
            @PathParam("project") String project,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete("/{organization}/{project}/_apis/build/tags/{tag}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<List<String>>> deleteTag(
            @HostParam("$host") String endpoint,
            @PathParam("organization") String organization,
            @PathParam("project") String project,
            @PathParam("tag") String tag,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Adds tags to a build.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param body The tags to add.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of Post200ApplicationJsonItemsItem.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<List<String>>> addBuildTagsWithResponseAsync(
        String organization, String project, int buildId, List<String> body) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        }
        final String apiVersion = "6.0";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .addBuildTags(
                            this.client.getEndpoint(),
                            organization,
                            project,
                            buildId,
                            apiVersion,
                            body,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Adds tags to a build.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param body The tags to add.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of Post200ApplicationJsonItemsItem.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<List<String>>> addBuildTagsWithResponseAsync(
        String organization, String project, int buildId, List<String> body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        }
        final String apiVersion = "6.0";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .addBuildTags(this.client.getEndpoint(), organization, project, buildId, apiVersion, body, accept, context);
    }

    /**
     * Adds tags to a build.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param body The tags to add.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of Post200ApplicationJsonItemsItem.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<List<String>> addBuildTagsAsync(String organization, String project, int buildId, List<String> body) {
        return addBuildTagsWithResponseAsync(organization, project, buildId, body)
            .flatMap(
                (Response<List<String>> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Adds tags to a build.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param body The tags to add.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of Post200ApplicationJsonItemsItem.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<String> addBuildTags(String organization, String project, int buildId, List<String> body) {
        return addBuildTagsAsync(organization, project, buildId, body).block();
    }

    /**
     * Adds tags to a build.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param body The tags to add.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of Post200ApplicationJsonItemsItem.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<List<String>> addBuildTagsWithResponse(
        String organization, String project, int buildId, List<String> body, Context context) {
        return addBuildTagsWithResponseAsync(organization, project, buildId, body, context).block();
    }

    /**
     * Gets the tags for a build.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the tags for a build.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<List<String>>> getBuildTagsWithResponseAsync(
        String organization, String project, int buildId) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        final String apiVersion = "6.0";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getBuildTags(
                            this.client.getEndpoint(), organization, project, buildId, apiVersion, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the tags for a build.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the tags for a build.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<List<String>>> getBuildTagsWithResponseAsync(
        String organization, String project, int buildId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        final String apiVersion = "6.0";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .getBuildTags(this.client.getEndpoint(), organization, project, buildId, apiVersion, accept, context);
    }

    /**
     * Gets the tags for a build.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the tags for a build.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<List<String>> getBuildTagsAsync(String organization, String project, int buildId) {
        return getBuildTagsWithResponseAsync(organization, project, buildId)
            .flatMap(
                (Response<List<String>> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets the tags for a build.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the tags for a build.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<String> getBuildTags(String organization, String project, int buildId) {
        return getBuildTagsAsync(organization, project, buildId).block();
    }

    /**
     * Gets the tags for a build.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the tags for a build.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<List<String>> getBuildTagsWithResponse(
        String organization, String project, int buildId, Context context) {
        return getBuildTagsWithResponseAsync(organization, project, buildId, context).block();
    }

    /**
     * Adds a tag to a build.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param tag The tag to add.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of Put200ApplicationJsonItemsItem.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<List<String>>> addBuildTagWithResponseAsync(
        String organization, String project, int buildId, String tag) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        if (tag == null) {
            return Mono.error(new IllegalArgumentException("Parameter tag is required and cannot be null."));
        }
        final String apiVersion = "6.0";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .addBuildTag(
                            this.client.getEndpoint(),
                            organization,
                            project,
                            buildId,
                            tag,
                            apiVersion,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Adds a tag to a build.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param tag The tag to add.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of Put200ApplicationJsonItemsItem.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<List<String>>> addBuildTagWithResponseAsync(
        String organization, String project, int buildId, String tag, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        if (tag == null) {
            return Mono.error(new IllegalArgumentException("Parameter tag is required and cannot be null."));
        }
        final String apiVersion = "6.0";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .addBuildTag(this.client.getEndpoint(), organization, project, buildId, tag, apiVersion, accept, context);
    }

    /**
     * Adds a tag to a build.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param tag The tag to add.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of Put200ApplicationJsonItemsItem.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<List<String>> addBuildTagAsync(String organization, String project, int buildId, String tag) {
        return addBuildTagWithResponseAsync(organization, project, buildId, tag)
            .flatMap(
                (Response<List<String>> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Adds a tag to a build.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param tag The tag to add.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of Put200ApplicationJsonItemsItem.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<String> addBuildTag(String organization, String project, int buildId, String tag) {
        return addBuildTagAsync(organization, project, buildId, tag).block();
    }

    /**
     * Adds a tag to a build.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param tag The tag to add.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of Put200ApplicationJsonItemsItem.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<List<String>> addBuildTagWithResponse(
        String organization, String project, int buildId, String tag, Context context) {
        return addBuildTagWithResponseAsync(organization, project, buildId, tag, context).block();
    }

    /**
     * Removes a tag from a build.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param tag The tag to remove.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of Delete200ApplicationJsonItemsItem.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<List<String>>> deleteBuildTagWithResponseAsync(
        String organization, String project, int buildId, String tag) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        if (tag == null) {
            return Mono.error(new IllegalArgumentException("Parameter tag is required and cannot be null."));
        }
        final String apiVersion = "6.0";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .deleteBuildTag(
                            this.client.getEndpoint(),
                            organization,
                            project,
                            buildId,
                            tag,
                            apiVersion,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Removes a tag from a build.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param tag The tag to remove.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of Delete200ApplicationJsonItemsItem.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<List<String>>> deleteBuildTagWithResponseAsync(
        String organization, String project, int buildId, String tag, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        if (tag == null) {
            return Mono.error(new IllegalArgumentException("Parameter tag is required and cannot be null."));
        }
        final String apiVersion = "6.0";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .deleteBuildTag(
                this.client.getEndpoint(), organization, project, buildId, tag, apiVersion, accept, context);
    }

    /**
     * Removes a tag from a build.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param tag The tag to remove.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of Delete200ApplicationJsonItemsItem.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<List<String>> deleteBuildTagAsync(String organization, String project, int buildId, String tag) {
        return deleteBuildTagWithResponseAsync(organization, project, buildId, tag)
            .flatMap(
                (Response<List<String>> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Removes a tag from a build.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param tag The tag to remove.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of Delete200ApplicationJsonItemsItem.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<String> deleteBuildTag(String organization, String project, int buildId, String tag) {
        return deleteBuildTagAsync(organization, project, buildId, tag).block();
    }

    /**
     * Removes a tag from a build.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param tag The tag to remove.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of Delete200ApplicationJsonItemsItem.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<List<String>> deleteBuildTagWithResponse(
        String organization, String project, int buildId, String tag, Context context) {
        return deleteBuildTagWithResponseAsync(organization, project, buildId, tag, context).block();
    }

    /**
     * Adds multiple tags to a definition.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param definitionId The ID of the definition.
     * @param body The tags to add.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of String.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<List<String>>> addDefinitionTagsWithResponseAsync(
        String organization, String project, int definitionId, List<String> body) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        }
        final String apiVersion = "6.0";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .addDefinitionTags(
                            this.client.getEndpoint(),
                            organization,
                            project,
                            definitionId,
                            apiVersion,
                            body,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Adds multiple tags to a definition.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param definitionId The ID of the definition.
     * @param body The tags to add.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of String.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<List<String>>> addDefinitionTagsWithResponseAsync(
        String organization, String project, int definitionId, List<String> body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        }
        final String apiVersion = "6.0";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .addDefinitionTags(
                this.client.getEndpoint(), organization, project, definitionId, apiVersion, body, accept, context);
    }

    /**
     * Adds multiple tags to a definition.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param definitionId The ID of the definition.
     * @param body The tags to add.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of String.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<List<String>> addDefinitionTagsAsync(
        String organization, String project, int definitionId, List<String> body) {
        return addDefinitionTagsWithResponseAsync(organization, project, definitionId, body)
            .flatMap(
                (Response<List<String>> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Adds multiple tags to a definition.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param definitionId The ID of the definition.
     * @param body The tags to add.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of String.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<String> addDefinitionTags(String organization, String project, int definitionId, List<String> body) {
        return addDefinitionTagsAsync(organization, project, definitionId, body).block();
    }

    /**
     * Adds multiple tags to a definition.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param definitionId The ID of the definition.
     * @param body The tags to add.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of String.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<List<String>> addDefinitionTagsWithResponse(
        String organization, String project, int definitionId, List<String> body, Context context) {
        return addDefinitionTagsWithResponseAsync(organization, project, definitionId, body, context).block();
    }

    /**
     * Gets the tags for a definition.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param definitionId The ID of the definition.
     * @param revision The definition revision number. If not specified, uses the latest revision of the definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the tags for a definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<List<String>>> getDefinitionTagsWithResponseAsync(
        String organization, String project, int definitionId, Integer revision) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        final String apiVersion = "6.0";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getDefinitionTags(
                            this.client.getEndpoint(),
                            organization,
                            project,
                            definitionId,
                            revision,
                            apiVersion,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the tags for a definition.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param definitionId The ID of the definition.
     * @param revision The definition revision number. If not specified, uses the latest revision of the definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the tags for a definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<List<String>>> getDefinitionTagsWithResponseAsync(
        String organization, String project, int definitionId, Integer revision, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        final String apiVersion = "6.0";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .getDefinitionTags(
                this.client.getEndpoint(), organization, project, definitionId, revision, apiVersion, accept, context);
    }

    /**
     * Gets the tags for a definition.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param definitionId The ID of the definition.
     * @param revision The definition revision number. If not specified, uses the latest revision of the definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the tags for a definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<List<String>> getDefinitionTagsAsync(
        String organization, String project, int definitionId, Integer revision) {
        return getDefinitionTagsWithResponseAsync(organization, project, definitionId, revision)
            .flatMap(
                (Response<List<String>> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets the tags for a definition.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param definitionId The ID of the definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the tags for a definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<List<String>> getDefinitionTagsAsync(String organization, String project, int definitionId) {
        final Integer revision = null;
        return getDefinitionTagsWithResponseAsync(organization, project, definitionId, revision)
            .flatMap(
                (Response<List<String>> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets the tags for a definition.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param definitionId The ID of the definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the tags for a definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<String> getDefinitionTags(String organization, String project, int definitionId) {
        final Integer revision = null;
        return getDefinitionTagsAsync(organization, project, definitionId, revision).block();
    }

    /**
     * Gets the tags for a definition.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param definitionId The ID of the definition.
     * @param revision The definition revision number. If not specified, uses the latest revision of the definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the tags for a definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<List<String>> getDefinitionTagsWithResponse(
        String organization, String project, int definitionId, Integer revision, Context context) {
        return getDefinitionTagsWithResponseAsync(organization, project, definitionId, revision, context).block();
    }

    /**
     * Adds a tag to a definition.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param definitionId The ID of the definition.
     * @param tag The tag to add.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of String.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<List<String>>> addDefinitionTagWithResponseAsync(
        String organization, String project, int definitionId, String tag) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        if (tag == null) {
            return Mono.error(new IllegalArgumentException("Parameter tag is required and cannot be null."));
        }
        final String apiVersion = "6.0";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .addDefinitionTag(
                            this.client.getEndpoint(),
                            organization,
                            project,
                            definitionId,
                            tag,
                            apiVersion,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Adds a tag to a definition.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param definitionId The ID of the definition.
     * @param tag The tag to add.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of String.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<List<String>>> addDefinitionTagWithResponseAsync(
        String organization, String project, int definitionId, String tag, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        if (tag == null) {
            return Mono.error(new IllegalArgumentException("Parameter tag is required and cannot be null."));
        }
        final String apiVersion = "6.0";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .addDefinitionTag(
                this.client.getEndpoint(), organization, project, definitionId, tag, apiVersion, accept, context);
    }

    /**
     * Adds a tag to a definition.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param definitionId The ID of the definition.
     * @param tag The tag to add.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of String.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<List<String>> addDefinitionTagAsync(
        String organization, String project, int definitionId, String tag) {
        return addDefinitionTagWithResponseAsync(organization, project, definitionId, tag)
            .flatMap(
                (Response<List<String>> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Adds a tag to a definition.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param definitionId The ID of the definition.
     * @param tag The tag to add.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of String.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<String> addDefinitionTag(String organization, String project, int definitionId, String tag) {
        return addDefinitionTagAsync(organization, project, definitionId, tag).block();
    }

    /**
     * Adds a tag to a definition.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param definitionId The ID of the definition.
     * @param tag The tag to add.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of String.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<List<String>> addDefinitionTagWithResponse(
        String organization, String project, int definitionId, String tag, Context context) {
        return addDefinitionTagWithResponseAsync(organization, project, definitionId, tag, context).block();
    }

    /**
     * Removes a tag from a definition.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param definitionId The ID of the definition.
     * @param tag The tag to remove.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of String.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<List<String>>> deleteDefinitionTagWithResponseAsync(
        String organization, String project, int definitionId, String tag) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        if (tag == null) {
            return Mono.error(new IllegalArgumentException("Parameter tag is required and cannot be null."));
        }
        final String apiVersion = "6.0";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .deleteDefinitionTag(
                            this.client.getEndpoint(),
                            organization,
                            project,
                            definitionId,
                            tag,
                            apiVersion,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Removes a tag from a definition.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param definitionId The ID of the definition.
     * @param tag The tag to remove.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of String.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<List<String>>> deleteDefinitionTagWithResponseAsync(
        String organization, String project, int definitionId, String tag, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        if (tag == null) {
            return Mono.error(new IllegalArgumentException("Parameter tag is required and cannot be null."));
        }
        final String apiVersion = "6.0";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .deleteDefinitionTag(
                this.client.getEndpoint(), organization, project, definitionId, tag, apiVersion, accept, context);
    }

    /**
     * Removes a tag from a definition.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param definitionId The ID of the definition.
     * @param tag The tag to remove.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of String.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<List<String>> deleteDefinitionTagAsync(
        String organization, String project, int definitionId, String tag) {
        return deleteDefinitionTagWithResponseAsync(organization, project, definitionId, tag)
            .flatMap(
                (Response<List<String>> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Removes a tag from a definition.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param definitionId The ID of the definition.
     * @param tag The tag to remove.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of String.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<String> deleteDefinitionTag(String organization, String project, int definitionId, String tag) {
        return deleteDefinitionTagAsync(organization, project, definitionId, tag).block();
    }

    /**
     * Removes a tag from a definition.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param definitionId The ID of the definition.
     * @param tag The tag to remove.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of String.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<List<String>> deleteDefinitionTagWithResponse(
        String organization, String project, int definitionId, String tag, Context context) {
        return deleteDefinitionTagWithResponseAsync(organization, project, definitionId, tag, context).block();
    }

    /**
     * Gets a list of all build tags in the project.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all build tags in the project.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<List<String>>> getTagsWithResponseAsync(String organization, String project) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        final String apiVersion = "6.0";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service.getTags(this.client.getEndpoint(), organization, project, apiVersion, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets a list of all build tags in the project.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all build tags in the project.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<List<String>>> getTagsWithResponseAsync(
        String organization, String project, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        final String apiVersion = "6.0";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.getTags(this.client.getEndpoint(), organization, project, apiVersion, accept, context);
    }

    /**
     * Gets a list of all build tags in the project.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all build tags in the project.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<List<String>> getTagsAsync(String organization, String project) {
        return getTagsWithResponseAsync(organization, project)
            .flatMap(
                (Response<List<String>> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets a list of all build tags in the project.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all build tags in the project.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<String> getTags(String organization, String project) {
        return getTagsAsync(organization, project).block();
    }

    /**
     * Gets a list of all build tags in the project.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all build tags in the project.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<List<String>> getTagsWithResponse(String organization, String project, Context context) {
        return getTagsWithResponseAsync(organization, project, context).block();
    }

    /**
     * Removes a tag from builds, definitions, and from the tag store.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param tag The tag to remove.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of String.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<List<String>>> deleteTagWithResponseAsync(String organization, String project, String tag) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        if (tag == null) {
            return Mono.error(new IllegalArgumentException("Parameter tag is required and cannot be null."));
        }
        final String apiVersion = "6.0";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .deleteTag(this.client.getEndpoint(), organization, project, tag, apiVersion, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Removes a tag from builds, definitions, and from the tag store.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param tag The tag to remove.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of String.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<List<String>>> deleteTagWithResponseAsync(
        String organization, String project, String tag, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        if (tag == null) {
            return Mono.error(new IllegalArgumentException("Parameter tag is required and cannot be null."));
        }
        final String apiVersion = "6.0";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.deleteTag(this.client.getEndpoint(), organization, project, tag, apiVersion, accept, context);
    }

    /**
     * Removes a tag from builds, definitions, and from the tag store.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param tag The tag to remove.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of String.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<List<String>> deleteTagAsync(String organization, String project, String tag) {
        return deleteTagWithResponseAsync(organization, project, tag)
            .flatMap(
                (Response<List<String>> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Removes a tag from builds, definitions, and from the tag store.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param tag The tag to remove.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of String.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<String> deleteTag(String organization, String project, String tag) {
        return deleteTagAsync(organization, project, tag).block();
    }

    /**
     * Removes a tag from builds, definitions, and from the tag store.
     *
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param tag The tag to remove.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of String.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<List<String>> deleteTagWithResponse(
        String organization, String project, String tag, Context context) {
        return deleteTagWithResponseAsync(organization, project, tag, context).block();
    }
}
