// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.dev.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Represents a Subversion mapping entry. */
@Fluent
public final class SvnMappingDetails {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(SvnMappingDetails.class);

    /*
     * The depth.
     */
    @JsonProperty(value = "depth")
    private Integer depth;

    /*
     * Indicates whether to ignore externals.
     */
    @JsonProperty(value = "ignoreExternals")
    private Boolean ignoreExternals;

    /*
     * The local path.
     */
    @JsonProperty(value = "localPath")
    private String localPath;

    /*
     * The revision.
     */
    @JsonProperty(value = "revision")
    private String revision;

    /*
     * The server path.
     */
    @JsonProperty(value = "serverPath")
    private String serverPath;

    /**
     * Get the depth property: The depth.
     *
     * @return the depth value.
     */
    public Integer depth() {
        return this.depth;
    }

    /**
     * Set the depth property: The depth.
     *
     * @param depth the depth value to set.
     * @return the SvnMappingDetails object itself.
     */
    public SvnMappingDetails withDepth(Integer depth) {
        this.depth = depth;
        return this;
    }

    /**
     * Get the ignoreExternals property: Indicates whether to ignore externals.
     *
     * @return the ignoreExternals value.
     */
    public Boolean ignoreExternals() {
        return this.ignoreExternals;
    }

    /**
     * Set the ignoreExternals property: Indicates whether to ignore externals.
     *
     * @param ignoreExternals the ignoreExternals value to set.
     * @return the SvnMappingDetails object itself.
     */
    public SvnMappingDetails withIgnoreExternals(Boolean ignoreExternals) {
        this.ignoreExternals = ignoreExternals;
        return this;
    }

    /**
     * Get the localPath property: The local path.
     *
     * @return the localPath value.
     */
    public String localPath() {
        return this.localPath;
    }

    /**
     * Set the localPath property: The local path.
     *
     * @param localPath the localPath value to set.
     * @return the SvnMappingDetails object itself.
     */
    public SvnMappingDetails withLocalPath(String localPath) {
        this.localPath = localPath;
        return this;
    }

    /**
     * Get the revision property: The revision.
     *
     * @return the revision value.
     */
    public String revision() {
        return this.revision;
    }

    /**
     * Set the revision property: The revision.
     *
     * @param revision the revision value to set.
     * @return the SvnMappingDetails object itself.
     */
    public SvnMappingDetails withRevision(String revision) {
        this.revision = revision;
        return this;
    }

    /**
     * Get the serverPath property: The server path.
     *
     * @return the serverPath value.
     */
    public String serverPath() {
        return this.serverPath;
    }

    /**
     * Set the serverPath property: The server path.
     *
     * @param serverPath the serverPath value to set.
     * @return the SvnMappingDetails object itself.
     */
    public SvnMappingDetails withServerPath(String serverPath) {
        this.serverPath = serverPath;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
