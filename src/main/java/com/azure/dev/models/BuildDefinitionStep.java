// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.dev.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/** Represents a step in a build phase. */
@Fluent
public final class BuildDefinitionStep {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(BuildDefinitionStep.class);

    /*
     * Indicates whether this step should run even if a previous step fails.
     */
    @JsonProperty(value = "alwaysRun")
    private Boolean alwaysRun;

    /*
     * A condition that determines whether this step should run.
     */
    @JsonProperty(value = "condition")
    private String condition;

    /*
     * Indicates whether the phase should continue even if this step fails.
     */
    @JsonProperty(value = "continueOnError")
    private Boolean continueOnError;

    /*
     * The display name for this step.
     */
    @JsonProperty(value = "displayName")
    private String displayName;

    /*
     * Indicates whether the step is enabled.
     */
    @JsonProperty(value = "enabled")
    private Boolean enabled;

    /*
     * Dictionary of <string>
     */
    @JsonProperty(value = "environment")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> environment;

    /*
     * Dictionary of <string>
     */
    @JsonProperty(value = "inputs")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> inputs;

    /*
     * The reference name for this step.
     */
    @JsonProperty(value = "refName")
    private String refName;

    /*
     * The task associated with this step.
     */
    @JsonProperty(value = "task")
    private TaskDefinitionReference task;

    /*
     * The time, in minutes, that this step is allowed to run.
     */
    @JsonProperty(value = "timeoutInMinutes")
    private Integer timeoutInMinutes;

    /**
     * Get the alwaysRun property: Indicates whether this step should run even if a previous step fails.
     *
     * @return the alwaysRun value.
     */
    public Boolean alwaysRun() {
        return this.alwaysRun;
    }

    /**
     * Set the alwaysRun property: Indicates whether this step should run even if a previous step fails.
     *
     * @param alwaysRun the alwaysRun value to set.
     * @return the BuildDefinitionStep object itself.
     */
    public BuildDefinitionStep withAlwaysRun(Boolean alwaysRun) {
        this.alwaysRun = alwaysRun;
        return this;
    }

    /**
     * Get the condition property: A condition that determines whether this step should run.
     *
     * @return the condition value.
     */
    public String condition() {
        return this.condition;
    }

    /**
     * Set the condition property: A condition that determines whether this step should run.
     *
     * @param condition the condition value to set.
     * @return the BuildDefinitionStep object itself.
     */
    public BuildDefinitionStep withCondition(String condition) {
        this.condition = condition;
        return this;
    }

    /**
     * Get the continueOnError property: Indicates whether the phase should continue even if this step fails.
     *
     * @return the continueOnError value.
     */
    public Boolean continueOnError() {
        return this.continueOnError;
    }

    /**
     * Set the continueOnError property: Indicates whether the phase should continue even if this step fails.
     *
     * @param continueOnError the continueOnError value to set.
     * @return the BuildDefinitionStep object itself.
     */
    public BuildDefinitionStep withContinueOnError(Boolean continueOnError) {
        this.continueOnError = continueOnError;
        return this;
    }

    /**
     * Get the displayName property: The display name for this step.
     *
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The display name for this step.
     *
     * @param displayName the displayName value to set.
     * @return the BuildDefinitionStep object itself.
     */
    public BuildDefinitionStep withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the enabled property: Indicates whether the step is enabled.
     *
     * @return the enabled value.
     */
    public Boolean enabled() {
        return this.enabled;
    }

    /**
     * Set the enabled property: Indicates whether the step is enabled.
     *
     * @param enabled the enabled value to set.
     * @return the BuildDefinitionStep object itself.
     */
    public BuildDefinitionStep withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Get the environment property: Dictionary of &lt;string&gt;.
     *
     * @return the environment value.
     */
    public Map<String, String> environment() {
        return this.environment;
    }

    /**
     * Set the environment property: Dictionary of &lt;string&gt;.
     *
     * @param environment the environment value to set.
     * @return the BuildDefinitionStep object itself.
     */
    public BuildDefinitionStep withEnvironment(Map<String, String> environment) {
        this.environment = environment;
        return this;
    }

    /**
     * Get the inputs property: Dictionary of &lt;string&gt;.
     *
     * @return the inputs value.
     */
    public Map<String, String> inputs() {
        return this.inputs;
    }

    /**
     * Set the inputs property: Dictionary of &lt;string&gt;.
     *
     * @param inputs the inputs value to set.
     * @return the BuildDefinitionStep object itself.
     */
    public BuildDefinitionStep withInputs(Map<String, String> inputs) {
        this.inputs = inputs;
        return this;
    }

    /**
     * Get the refName property: The reference name for this step.
     *
     * @return the refName value.
     */
    public String refName() {
        return this.refName;
    }

    /**
     * Set the refName property: The reference name for this step.
     *
     * @param refName the refName value to set.
     * @return the BuildDefinitionStep object itself.
     */
    public BuildDefinitionStep withRefName(String refName) {
        this.refName = refName;
        return this;
    }

    /**
     * Get the task property: The task associated with this step.
     *
     * @return the task value.
     */
    public TaskDefinitionReference task() {
        return this.task;
    }

    /**
     * Set the task property: The task associated with this step.
     *
     * @param task the task value to set.
     * @return the BuildDefinitionStep object itself.
     */
    public BuildDefinitionStep withTask(TaskDefinitionReference task) {
        this.task = task;
        return this;
    }

    /**
     * Get the timeoutInMinutes property: The time, in minutes, that this step is allowed to run.
     *
     * @return the timeoutInMinutes value.
     */
    public Integer timeoutInMinutes() {
        return this.timeoutInMinutes;
    }

    /**
     * Set the timeoutInMinutes property: The time, in minutes, that this step is allowed to run.
     *
     * @param timeoutInMinutes the timeoutInMinutes value to set.
     * @return the BuildDefinitionStep object itself.
     */
    public BuildDefinitionStep withTimeoutInMinutes(Integer timeoutInMinutes) {
        this.timeoutInMinutes = timeoutInMinutes;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (task() != null) {
            task().validate();
        }
    }
}
