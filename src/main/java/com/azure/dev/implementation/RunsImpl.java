// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.dev.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.dev.fluent.RunsClient;
import com.azure.dev.fluent.models.RunInner;
import com.azure.dev.models.Run;
import com.azure.dev.models.RunPipelineParameters;
import com.azure.dev.models.Runs;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

public final class RunsImpl implements Runs {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(RunsImpl.class);

    private final RunsClient innerClient;

    private final com.azure.dev.DevManager serviceManager;

    public RunsImpl(RunsClient innerClient, com.azure.dev.DevManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public List<Run> list(String organization, String project, int pipelineId) {
        List<RunInner> inner = this.serviceClient().list(organization, project, pipelineId);
        if (inner != null) {
            return Collections
                .unmodifiableList(
                    inner.stream().map(inner1 -> new RunImpl(inner1, this.manager())).collect(Collectors.toList()));
        } else {
            return Collections.emptyList();
        }
    }

    public Response<List<Run>> listWithResponse(String organization, String project, int pipelineId, Context context) {
        Response<List<RunInner>> inner =
            this.serviceClient().listWithResponse(organization, project, pipelineId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                inner
                    .getValue()
                    .stream()
                    .map(inner1 -> new RunImpl(inner1, this.manager()))
                    .collect(Collectors.toList()));
        } else {
            return null;
        }
    }

    public Run runPipeline(String organization, String project, int pipelineId, RunPipelineParameters body) {
        RunInner inner = this.serviceClient().runPipeline(organization, project, pipelineId, body);
        if (inner != null) {
            return new RunImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Run> runPipelineWithResponse(
        String organization,
        String project,
        int pipelineId,
        RunPipelineParameters body,
        Integer pipelineVersion,
        Context context) {
        Response<RunInner> inner =
            this
                .serviceClient()
                .runPipelineWithResponse(organization, project, pipelineId, body, pipelineVersion, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new RunImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Run get(String organization, String project, int pipelineId, int runId) {
        RunInner inner = this.serviceClient().get(organization, project, pipelineId, runId);
        if (inner != null) {
            return new RunImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Run> getWithResponse(
        String organization, String project, int pipelineId, int runId, Context context) {
        Response<RunInner> inner =
            this.serviceClient().getWithResponse(organization, project, pipelineId, runId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new RunImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    private RunsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.dev.DevManager manager() {
        return this.serviceManager;
    }
}
