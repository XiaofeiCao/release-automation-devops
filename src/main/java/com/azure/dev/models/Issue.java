// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.dev.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/** Represents an issue (error, warning) associated with a build. */
@Fluent
public final class Issue {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(Issue.class);

    /*
     * The category.
     */
    @JsonProperty(value = "category")
    private String category;

    /*
     * Dictionary of <string>
     */
    @JsonProperty(value = "data")
    private Map<String, String> data;

    /*
     * A description of the issue.
     */
    @JsonProperty(value = "message")
    private String message;

    /*
     * The type (error, warning) of the issue.
     */
    @JsonProperty(value = "type")
    private IssueType type;

    /**
     * Get the category property: The category.
     *
     * @return the category value.
     */
    public String category() {
        return this.category;
    }

    /**
     * Set the category property: The category.
     *
     * @param category the category value to set.
     * @return the Issue object itself.
     */
    public Issue withCategory(String category) {
        this.category = category;
        return this;
    }

    /**
     * Get the data property: Dictionary of &lt;string&gt;.
     *
     * @return the data value.
     */
    public Map<String, String> data() {
        return this.data;
    }

    /**
     * Set the data property: Dictionary of &lt;string&gt;.
     *
     * @param data the data value to set.
     * @return the Issue object itself.
     */
    public Issue withData(Map<String, String> data) {
        this.data = data;
        return this;
    }

    /**
     * Get the message property: A description of the issue.
     *
     * @return the message value.
     */
    public String message() {
        return this.message;
    }

    /**
     * Set the message property: A description of the issue.
     *
     * @param message the message value to set.
     * @return the Issue object itself.
     */
    public Issue withMessage(String message) {
        this.message = message;
        return this;
    }

    /**
     * Get the type property: The type (error, warning) of the issue.
     *
     * @return the type value.
     */
    public IssueType type() {
        return this.type;
    }

    /**
     * Set the type property: The type (error, warning) of the issue.
     *
     * @param type the type value to set.
     * @return the Issue object itself.
     */
    public Issue withType(IssueType type) {
        this.type = type;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
